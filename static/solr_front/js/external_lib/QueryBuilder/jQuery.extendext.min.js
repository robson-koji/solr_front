/* !
 * jQuery.extendext 0.1.2
 *
 * Copyright 2014-2016 Damien "Mistic" Sorel (http://www.strangeplanet.fr)
 * Licenciado em MIT (http://opensource.org/licenses/MIT)
 *
 * Baseado em jQuery.extend por jQuery Foundation, Inc. e outros contribuidores
 */
 ! function (a, b) {"function" == typeof define && define.amd? define (["jquery"], b): "object" == typeof module && module.exports? module.exports = b (requer ("jquery" )): b (a.jQuery)} (isto, função ($) {"use strict"; $. extendext = function () {var a, b, c, d, e, f, g = argumentos [0] || {}, h = 1, i = arguments.length, j =! 1, k = "default"; para ("boolean" == typeof g && (j = g, g = argumentos [h ++] || {} ), "string" == typeof g && (k = g.toLowerCase (), "concat"! == k && "substituir"! == k && "extend"! == k && (k = "default"), g = argumentos [h ++] || {}), "object" == typeof g || $ .isFunction (g) || (g = {}), h === i && (g = this, h -); h < i; h ++) if (null! == (a = argumentos [h])) se ($. isArray (a) && "default"! == k) switch (f = g && $. isArray (g)? g: [], k) {caso "concat ": g = f.concat ($. extend (j, [], a)); break; case" replace ": g = $. extends (j, [], a); break; caso" extender ": a.forEach (function (a, b) {if ("object" == typeof a) {var c = $. isArray (a)? []: {}; f [b] = $. extendext (j, k , f [b] || c, a)} else f.indexOf (a) === - 1 && f.push (a)}), g = f} else para (b em a) c = g [b], d = a [b], g! == d && (j && d && ($. isPlainObject (d) || (e = $. isArray (d)))? (e? (e =! 1, f = c && $. isArray (c)? c: []): f = c && $. isPlainObject (c)? c: {}, g [b] = $. extendext (j, k, f, d)): void 0! == d && (g [b] = d)); retornar g}});(j && d && ($. isPlainObject (d) || (e = $. isArray (d)))? (e? (e =! 1, f = c && $. isArray (c)? c: []): f = c && $. isPlainObject (c)? c: {}, g [b] = $. extendext (j, k, f, d)): void 0! == d && (g [b] = d)); retorno g }});(j && d && ($. isPlainObject (d) || (e = $. isArray (d)))? (e? (e =! 1, f = c && $. isArray (c)? c: []): f = c && $. isPlainObject (c)? c: {}, g [b] = $. extendext (j, k, f, d)): void 0! == d && (g [b] = d)); retorno g }});
